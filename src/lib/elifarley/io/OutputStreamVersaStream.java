/* OutputStreamVersaStream -- Returns a VersaStream from an OutputStream. * Copyright (C) 2001 Elifarley Callado Coelho  * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License, version 2, * as published by the Free Software Foundation; * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. * See the file "COPYING" for the software license.  * Elifarley Callado Coelho * Belo Horizonte, Brazil * elifarley@yahoo.com * http://www.geocities.com/elifarley/ *  */ package elifarley.io;import java.io.IOException;import java.io.OutputStream;public class OutputStreamVersaStream extends VersaStream {		private OutputStream out;	private long pos = 0;		public OutputStreamVersaStream(OutputStream out) throws IOException {		this.out = out;	}		public int read() throws IOException {		throw new IOException("Reading not allowed");	}				public void write(int b) throws IOException {		out.write(b);		pos++;	}    public void write(byte b[], int off, int len) throws IOException {		out.write(b, off, len);		pos += len;	}		public long seek(long offset, short origin) throws IOException {		long newPos;				switch(origin){			case FROM_BEGINNING: newPos = offset; break;			case FROM_CURRENT: newPos = pos + offset; break;			case FROM_END: throw new CannotSeekToEndException();//newPos = pos + offset; break; // Should we throw an exception here?			default: throw new IOException("Invalid origin: " + origin);		}						if (pos != newPos) throw new IOException("Seek is allowed only to the current position");				return pos;	}	    public boolean canRead() {    	return false;    }    public boolean canWrite() {    	return true;    }    public boolean canSeekFromEnd() {    	return false;    }    public boolean canSeekBackwards() {    	return false;    }    public boolean canSeekForward() {    	return false;    }	public synchronized long getSize() throws IOException {		return pos;	}	public void setSize(long newSize) throws IOException {		throw new CannotSetSizeException();	}	public synchronized void mark(int readLimit) {			}    public void flush() throws IOException {		out.flush();	}		public void close() throws IOException {		out.close();	}		}