/* VersaStreamFactory -- Automatically detects and returns an approrpiate  * descendant of VersaStream. * Copyright (C) 2001 Elifarley Callado Coelho  * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License, version 2, * as published by the Free Software Foundation; * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. * See the file "COPYING" for the software license.  * Elifarley Callado Coelho * Belo Horizonte, Brazil * elifarley@yahoo.com * http://www.geocities.com/elifarley/ *  */package elifarley.io;import elifarley.razip.RAZipConstants;import elifarley.razip.RAZipVersaStream;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.io.Reader;import java.io.Writer;public final class VersaStreamFactory {		public static final short GZIP_ID = (short) 0x1F8B;		public static VersaStream getVersaStream(String path, String mode) throws IOException {		return getVersaStream(path, mode, false);	}		public static VersaStream getVersaStream(String path, String mode, boolean forceUncompressed) throws IOException {		String st = new String(path.toUpperCase());				if (st.startsWith("HTTP://") || st.startsWith("FTP://")) {			return new URLVersaStream(path);		}				VersaStream vs = new FileVersaStream(path, mode);				if (!forceUncompressed) vs = getFilteredVersaStream(vs);				return vs;			}		public static VersaStream getVersaStream() throws IOException {		return new MemoryVersaStream();	}	public static VersaStream getVersaStream(byte buf[]) throws IOException {		return new MemoryVersaStream(buf);	}	public static VersaStream getVersaStream(InputStream in) throws IOException {		return new InputStreamVersaStream(in);	}	public static VersaStream getVersaStream(OutputStream out) throws IOException {		return new OutputStreamVersaStream(out);	}	public static VersaStream getVersaStream(Reader in) throws IOException {		return new ReaderVersaStream(in);	}	public static VersaStream getVersaStream(Writer out) throws IOException {		return new WriterVersaStream(out);	}	/*	 * Detects compressed stream	*/	public static VersaStream getFilteredVersaStream(VersaStream vs) throws IOException {				System.out.println("Trying to detect format...");				short sVal;		boolean isReadOnly = !vs.canWrite();				if (isReadOnly) {			if (vs.getSize() > 2) {				sVal = vs.readShort();				vs.reset();				if (sVal == RAZipConstants.RAZIP_MAGIC) {					System.out.println("RAZip format detected (read-only)");					vs = new RAZipVersaStream(vs);				} else if (sVal == GZIP_ID ) {					System.out.println("GZip format detected (read-only)");					vs = new GZipVersaStream(vs);					//InputStreamVersaStream(new GZIPResetInputStream( vs.getInputStream(0) ));				}							}					} else {			if (vs.getSize() > 2) {				sVal = vs.readShort();				vs.reset();				if (sVal == RAZipConstants.RAZIP_MAGIC) {					System.out.println("RAZip format detected (read/write)");					vs = new RAZipVersaStream(vs);				} else if (sVal == GZIP_ID) {					throw new IOException("Cannot open GZip stream in read/write mode");				} else {					//nothing				}							} else {				System.out.println("Creating new RAZip stream (read/write)");				vs = new RAZipVersaStream(vs);			}		}				return vs;			}		}