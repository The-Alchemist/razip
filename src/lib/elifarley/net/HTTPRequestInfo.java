/*CopyrightPortions of this software are Copyright (c) 1993 - 2001, Chad Z. Hower (Kudzu) and the Indy Pit Crew - http://www.nevrona.com/Indy/LicenseRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:*	Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. *	Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation, about box and/or other materials provided with the distribution. *	No personal names or organizations names associated with the Indy project may be used to endorse or promote products derived from this software without specific prior written permission of the specific individual or organization. THIS SOFTWARE IS PROVIDED BY Chad Z. Hower (Kudzu) and the Indy Pit Crew "AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Translation to java and modifications by Elifarley C. Coelho*/package elifarley.net;import elifarley.io.*;import elifarley.util.*;import java.util.Enumeration;import java.io.IOException;import java.io.InputStream;import java.io.OutputStream;import java.net.URL;public class HTTPRequestInfo implements Messages{    //protected HTTPSession session;    private String tempHost;    protected String remoteIP;    protected String host, document, command, version,     			authUsername, authPassword, unparsedParams;    protected boolean authExists, parseParams = true;    protected StringListVector headers = new StringListVector(), params = new StringListVector();    //protected CookieCollection cookies = new cookieCollection(TIdCookie);    // void SetCookies(const Value: TIdCookieCollection);    //void SetHeaders(const AValue: TStrings);    //void SetParams(const AValue: TStrings);      public HTTPRequestInfo(VersaStream invs) throws Exception {    	this("", invs);    }    public HTTPRequestInfo(String IP) throws Exception {    	this(IP, null);    }        public HTTPRequestInfo(String IP, VersaStream invs) throws Exception {    	this.remoteIP = IP;    	if (invs != null) this.load(invs);    }    /*    public HTTPSession getSession() { // read FSession;    	return session;    }    */        public boolean getAuthExists() {    	return authExists;    }        public void setAuthExists(boolean b) {    	authExists = b;    }    public String getAuthPassword() {    	return new String(authPassword);    }        public void setAuthPassword(String s) {    	authPassword = s;    }        public String getAuthUsername() {    	return authUsername == null ? new String("") : new String(authUsername);    }    public void setAuthUsername(String s) {    	authUsername = s;    }    public String getCommand() {    	return command == null ? new String("") : new String(command);    }    public String getDocument() {    	return document == null ? new String("") : new String(document);    }    public String getUnparsedParams() {    	return unparsedParams == null ? new String("") : new String(unparsedParams);    }    public String getVersion() {    	return version == null ? new String("") : new String(version);    }    public String getHost() {    	return host == null ? new String("") : new String(host);    }    public String getRemoteIP() {    	return remoteIP == null ? new String("") : new String(remoteIP);    }     /*     cookies: TIdCookieCollection read FCookies write SetCookies;     Headers: TStrings read FHeaders write SetHeaders;     Params: TStrings read FParams write SetParams;     */     	public void loadFirstLine(String s) throws Exception {		//System.out.println("FirstLine: \'" + s + "\'");		 		int i1 = s.indexOf(' ');		int i2 = s.lastIndexOf(' ');				if (i1 == -1 || i2 == -1) {			throw new Exception(RSHTTPErrorParsingCommand);		}		this.command = s.substring(0, i1).toUpperCase();		this.version = s.substring(i2 + 1);		//{TODO Check for 1.0 only at this point}	    		// Grab Params so we can parse them	    int paramIndex = s.indexOf('?', i1 + 1);		if (paramIndex != -1) {			this.tempHost = s.substring(i1 + 1, paramIndex);			this.unparsedParams = s.substring(paramIndex + 1, i2);		} else {			this.tempHost = s.substring(i1 + 1, i2);		}						}		public void loadHeader(VersaStream invs) {		int iTokenPos;		String sDataLine, tempS;		try {			this.headers.removeAllElements();			// While we are not receiving a double CR+LF sequence, read the headers			while ( (sDataLine = invs.readLine()) != null && sDataLine.length() > 0 ) {				//.trim();								// Save the unparsed params				this.unparsedParams += sDataLine + '\n'; 				this.headers.addElement(new NameValueString(sDataLine, ':'));				//System.out.println("loadHeader: \'" + sDataLine + "\'");							}			/*			sDataLine = invs.readLine();			if (sDataLine != null && sDataLine.length() != 0) {				System.err.println("Error in header !!!!!!!");			}			*/					} catch(Exception e) {			e.printStackTrace();		}				decodeHeaders();	} 	public void decodeHeaders() {		NameValueString sCurrentHeader;		Enumeration hEnum = headers.elements();		String nameLower;				while (hEnum.hasMoreElements()) {			sCurrentHeader = (NameValueString)hEnum.nextElement();			nameLower = sCurrentHeader.name().toLowerCase();							// Cookies			if (nameLower.equals("cookie") ) {				StringListVector slv = sCurrentHeader.value().split(';');				for (int i = 0; i < slv.size(); i++) {					//cookies.addSrcCookie((NameValueString)slv[i++]);					//System.out.println("cookies.addSrcCookie: " + ( (NameValueString)slv.elementAt(i) ).toString() );				}			} else				// Host				if ( nameLower.equals("host") ) {					//System.out.println("Changing host " + host + " to host " + sCurrentHeader.value().toString());					this.host = sCurrentHeader.value().toString();				}					} 		 	}	public void load(VersaStream invs) throws Exception {		try {						invs.setNewLine(VersaStream.NEWLINE_DOS);			loadFirstLine(invs.readLine());			loadHeader(invs);						if (this.getCommand().equals("POST") ) {				if (this.unparsedParams != null) {					System.out.println("Old params: " + this.unparsedParams);				}				// {TODO Change this, not all Posters send content-length}				//invs.copyTo(this.unparsedParams, headers.getValueInt("Content-Length"));				this.unparsedParams = invs.toString();				}		    if (parseParams) {				// Convert special characters				//this.unparsedParams = StringReplace(this.unparsedParams, '%0D', #27, [rfReplaceAll, rfIgnoreCase]);				//this.unparsedParams = StringReplace(this.unparsedParams, '%0A', '', [rfReplaceAll, rfIgnoreCase]);				this.unparsedParams = NetUtils.URLDecode(this.unparsedParams);				this.params.setAsText(unparsedParams, '&');			}		    		    URL url = new URL(this.tempHost);		    if (!url.getProtocol().equals("http")) throw new Exception("Not a HTTP protocol url");		    int serverPort = url.getPort() == -1 ? 80 : url.getPort();			    			// Parse the document input line			if (this.host == "*") {				this.document = "*";			} else {				//ParseURI(sInputLine, sProtocol, sHost, sPath, sDocument, sPort);				//this.document = sPath + sDocument;				this.document = url.getFile();			}						// Try to fill the "host" parameter			if (url.getHost().length() > 0 && this.host.length() == 0) {				this.host = url.getHost();			}		    //System.out.println("The host is: " + this.host);			//System.out.println("The file is: " + this.document);			String s = headers.getValueStr("Authorization").trim();			this.authExists = s.length() > 0;			if (this.authExists) {				if (s.toLowerCase().equals("basic") ) {					//s = Base64Decode(s);					//this.authUsername = Fetch(s, ':');					//this.authPassword = s;				} else {					throw new Exception(RSHTTPUnsupportedAuthorisationScheme);				}							}		} catch(IOException ioe) {			//Thread.currentThread().toString();			ioe.printStackTrace();		}	}	 	    }