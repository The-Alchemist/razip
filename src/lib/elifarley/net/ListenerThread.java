/*CopyrightPortions of this software are Copyright (c) 1993 - 2001, Chad Z. Hower (Kudzu) and the Indy Pit Crew - http://www.nevrona.com/Indy/LicenseRedistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:*	Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. *	Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation, about box and/or other materials provided with the distribution. *	No personal names or organizations names associated with the Indy project may be used to endorse or promote products derived from this software without specific prior written permission of the specific individual or organization. THIS SOFTWARE IS PROVIDED BY Chad Z. Hower (Kudzu) and the Indy Pit Crew "AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE REGENTS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE. Translation to java and modifications by Elifarley C. Coelho*/package elifarley.net;import elifarley.util.*;import java.net.*;import elifarley.io.*;import elifarley.util.VersaObjCache;import java.io.IOException;	// This is the thread that listens for incoming connections and spawns  	// new ones to handle each one  	public class ListenerThread extends VersaThread {	protected int acceptWait;    //protected Vector bindingList;    protected ServerSocket binding;    protected TCPServer server;	protected int maxCacheSize = 0; // 32;		protected VersaObjCache threadCache = new VersaObjCache(maxCacheSize) {	    protected Object createNewObj() { 	    	//System.out.println("Will create new thread");	    	return new PeerThread(){	    		public void afterRun() {	    			super.afterRun();	    			//System.out.println("Will release thread " + this);	    			threadCache.releaseObject(this);	    		}	    	};		}	    //protected void reset(Object obj) { ( (PeerThread)obj ).reset(); }	};   	   	public	ListenerThread(TCPServer axServer) {  		super();  		setDaemon(true);  		//FBindingList = TList.Create;		server = axServer;	}        public int getAcceptWait() {    	return acceptWait;    }        public void setAcceptWait(int value) {    	acceptWait = value;    }        public TCPServer getServer() {    	return server;    }	public void execute() {  		String peerIP;  		int peerPort;  		TCPServerConnection peer;  		PeerThread thread;  		Socket peerSocket;  		/*  		bindingList.clear();  		for (i= 0 to server.bindings.count() - 1) do {    		bindingList.add(Object(server.bindings[i].handle));  		}  		*/  		binding = server.bindings; // just for now  		//if GStack.WSSelect(FBindingList, nil, nil, AcceptWait) > 0 then {  		try {  			peerSocket = binding.accept();    	} catch(IOException ioe) {    		return;    	}    	    	if (!terminated) {      		//for (int i = 0; i < bindingList.count(); i++) {     		try {        		peer = new TCPServerConnection(server);          		/*          		peer.Binding.accept(server.Bindings[i].Handle, peerIP, peerPort);          		peer.Binding.IP = server.Bindings[i].IP;          		peer.Binding.port = server.Bindings[i].port;          		peer.Binding.setPeer(peerIP, peerPort);          		*/          		peer.binding = peerSocket;          		          		peer.invs = peerSocket.getInputStream();          		peer.outvs = peerSocket.getOutputStream();     		     		} catch(Exception e) {     			e.printStackTrace();     			try {     				peerSocket.close();     			} catch (IOException ioe) {     				ioe.printStackTrace();     			}     			peer = null;     		}          		          		// LastRcvTimeStamp = Now;  // Added for session timeout support          		// ProcessingTimeout = False;          		/*          		if (server.intercept != null) {            		try {              			peer.intercept = server.intercept.accept(binding);            		} catch (Exception e) {              			freeAndNil(peer);            		}            		          		}          		*/        	//}        	        	if (peer != null) {          		// Create Thread          		//Thread = TIdPeerThread(Server.ThreadMgr.GetThread);          		PeerThread pt = (PeerThread) threadCache.getObject(); //new PeerThread(peer);          		pt.setConnection(peer);          		pt.stopMode = SM_TERMINATE;          		server.threads.addElement(pt);          		pt.v_start(); //Thread.Start;        	}          	} // if (!terminated)    }	public void afterRun() {		super.afterRun();		/*		for (int i = server.bindings.count - 1; i >= 0; i--)  {	    	server.bindings[i].closeSocket();	  	}	  	*/	  	try {	  		server.bindings.close();	  	} catch (IOException ioe) {	  	}	  		}}