/* StringListVector -- A vector with some useful additions. * Copyright (C) 2001 Elifarley Callado Coelho  * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License, version 2, * as published by the Free Software Foundation; * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. * See the file "COPYING" for the software license.  * Elifarley Callado Coelho * Belo Horizonte, Brazil * elifarley@yahoo.com * http://www.geocities.com/elifarley/ *  */ package elifarley.util;import java.util.Vector;public class StringListVector extends Vector {		public void setAsText(String s, char sep) {		copyFrom( (new NameValueString(s)).split(sep));	}		public void copyFrom(StringListVector slv) {		this.removeAllElements();		ensureCapacity(slv.size());		for (int i = 0; i < slv.size(); ) {			this.addElement(slv.elementAt(i++) );		}			}		public synchronized int indexOfName(String name) {		int result;		for (result = 0; result < elementCount; result++) {			if ( ( (NameValueString)elementData[result] ).name().toLowerCase().equals(name.toLowerCase()) ) {				return result;			}		}				return -1;	}		public synchronized String getValueStr(String name, String def) {		int i = indexOfName(name);		if (i >= 0)			return ( (NameValueString)elementData[i] ).value().toString();		else			return new String(def);	}	public synchronized String getValueStr(String name) {		return getValueStr(name, "");	}	public synchronized int getValueInt(String name, int def) {		int i = indexOfName(name);		if (i >= 0)			return Integer.parseInt(( (NameValueString)elementData[i] ).value().toString(), 10);		else			return def;	}	public synchronized int getValueInt(String name) {		return getValueInt(name, 0);	}			public void setValue(String name, String value, char sep) {		int i = indexOfName(name);		  		if (value != null && !value.equals("") ) {			NameValueString tempNVS = new NameValueString(name, value, sep);				if (i < 0) {				addElement(tempNVS);			} else				setElementAt(tempNVS, i);		} else 			if (i >= 0) removeElementAt(i);			  	}				}