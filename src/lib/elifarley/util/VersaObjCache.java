/* VersaObjCache -- Implements a generic object cache. * Copyright (C) 2001 Elifarley Callado Coelho  * This program is free software; you can redistribute it and/or * modify it under the terms of the GNU General Public License, version 2, * as published by the Free Software Foundation; * This program is distributed in the hope that it will be useful, * but WITHOUT ANY WARRANTY; without even the implied warranty of * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the * GNU General Public License for more details. * You should have received a copy of the GNU General Public License * along with this program; if not, write to the Free Software * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA. * See the file "COPYING" for the software license.  * Elifarley Callado Coelho * Belo Horizonte, Brazil * elifarley@yahoo.com * http://www.geocities.com/elifarley/ *  */ package elifarley.util;import java.util.Vector;public abstract class VersaObjCache {	protected int size = 0;	protected int maxCacheSize;    protected Object objectPool[];	//protected Vector activeObjects = new Vector(256);	    protected abstract Object createNewObj();    protected void reset(Object obj) {};	    public VersaObjCache(int maxSize) {    	this.maxCacheSize = maxSize;    	this.objectPool = new Object[maxCacheSize];    }        public final Object getObject() {		synchronized (objectPool) {		    //int size = objects.length;		    if (size > 0) {				System.out.println("Getting obj at " + (size - 1));				Object obj = objectPool[--size];				//inflaters.removeElementAt(size - 1);				if (obj == null) {					System.out.println("Obj is null !!!!");				} else {					System.out.println("Obj " + obj.toString());				}								reset(obj);				System.out.println("Obj reset.");				return obj;		    } else {				System.out.println("Creating new item");		    	//System.out.println("pool size: " + inflaters.size());				return createNewObj();		    }		}    }    /*     * Releases the specified inflater to the list of available inflaters.     */    public final void releaseObject(Object obj) {		synchronized (objectPool) {		    System.out.println("Releasing object " + obj.toString());		    if (size < maxCacheSize) {		    	objectPool[size++] = obj;		    	System.out.println("new Size: " + size);		    	if (obj == null) System.out.println("Obj is null !!!!");		    	System.out.println( "objectPool at size " + objectPool[size - 1].toString() );		    } else {		    	//System.out.println("Cache size exceeded");		    	obj = null;		    }		}    }}